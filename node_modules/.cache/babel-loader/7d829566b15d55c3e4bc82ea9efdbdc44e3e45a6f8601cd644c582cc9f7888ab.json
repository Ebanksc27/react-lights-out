{"ast":null,"code":"var _jsxFileName = \"/Users/cameronebanks/Downloads/react-lights-out/src/Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n\n  // TODO: create a board nrows high/ncols wide, each cell randomly lit or unlit\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  // TODO: check the board in state to determine whether the player has won.\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  // TODO: flip cells around a given cell\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const boardCopy = oldBoard.map(row => [...row]);\n      const flipCell = (y, x) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n      flipCell(y, x); // Flip the clicked cell\n      flipCell(y, x - 1); // Left\n      flipCell(y, x + 1); // Right\n      flipCell(y - 1, x); // Above\n      flipCell(y + 1, x); // Below\n\n      return boardCopy;\n    });\n  }\n\n  // TODO: if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"winner\",\n      children: \"You Won!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 12\n    }, this);\n  }\n\n  // TODO: Create a table board\n  let tableBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push( /*#__PURE__*/_jsxDEV(Cell, {\n        isLit: board[y][x],\n        flipCellsAroundMe: () => flipCellsAround(coord)\n      }, coord, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 9\n      }, this));\n    }\n    tableBoard.push( /*#__PURE__*/_jsxDEV(\"tr\", {\n      children: row\n    }, y, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 21\n    }, this));\n  }\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    className: \"Board\",\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: tableBoard\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 96,\n    columnNumber: 5\n  }, this);\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","y","row","x","push","Math","random","hasWon","every","cell","flipCellsAround","coord","oldBoard","split","map","Number","boardCopy","flipCell","className","children","fileName","_jsxFileName","lineNumber","columnNumber","tableBoard","isLit","flipCellsAroundMe","_c","$RefreshReg$"],"sources":["/Users/cameronebanks/Downloads/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n\n  // TODO: create a board nrows high/ncols wide, each cell randomly lit or unlit\n  function createBoard() {\n    let initialBoard = [];\n    for (let y = 0; y < nrows; y++) {\n      let row = [];\n      for (let x = 0; x < ncols; x++) {\n        row.push(Math.random() < chanceLightStartsOn);\n      }\n      initialBoard.push(row);\n    }\n    return initialBoard;\n  }\n\n  // TODO: check the board in state to determine whether the player has won.\n  function hasWon() {\n    return board.every(row => row.every(cell => !cell));\n  }\n\n  // TODO: flip cells around a given cell\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      const [y, x] = coord.split(\"-\").map(Number);\n      const boardCopy = oldBoard.map(row => [...row]);\n\n      const flipCell = (y, x) => {\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      flipCell(y, x); // Flip the clicked cell\n      flipCell(y, x - 1); // Left\n      flipCell(y, x + 1); // Right\n      flipCell(y - 1, x); // Above\n      flipCell(y + 1, x); // Below\n\n      return boardCopy;\n    });\n  }\n\n  // TODO: if the game is won, just show a winning msg & render nothing else\n  if (hasWon()) {\n    return <div className=\"winner\">You Won!</div>;\n  }\n\n  // TODO: Create a table board\n  let tableBoard = [];\n  for (let y = 0; y < nrows; y++) {\n    let row = [];\n    for (let x = 0; x < ncols; x++) {\n      let coord = `${y}-${x}`;\n      row.push(\n        <Cell\n          key={coord}\n          isLit={board[y][x]}\n          flipCellsAroundMe={() => flipCellsAround(coord)}\n        />\n      );\n    }\n    tableBoard.push(<tr key={y}>{row}</tr>);\n  }\n\n  return (\n    <table className=\"Board\">\n      <tbody>{tableBoard}</tbody>\n    </table>\n  );\n}\n\nexport default Board;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}